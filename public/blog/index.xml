<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Yeo Space</title>
    <link>https://yeo.space/blog/index.xml</link>
    <description>Recent content in Blogs on Yeo Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Jan 2017 00:01:19 -0800</lastBuildDate>
    <atom:link href="https://yeo.space/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>mongodb sync index</title>
      <link>https://yeo.space/blog/mongodb-sync-index/</link>
      <pubDate>Wed, 04 Jan 2017 00:01:19 -0800</pubDate>
      
      <guid>https://yeo.space/blog/mongodb-sync-index/</guid>
      <description>

&lt;p&gt;When operating MongoDB at scale, I found mysef have to add/remove
replica a lot. One thing that always bug me is the index. I used Mongoid
as my ODM, so once the index is defined, creating it is easily with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rake db:mongoid:create_indexes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, given my  experience, lots of time the index wasn&amp;rsquo;t created properly.
It&amp;rsquo;s maybe because old version of gem that I used. But that&amp;rsquo;s in the
point of this post.&lt;/p&gt;

&lt;p&gt;In this article, I want to show you how we can manually sync index from
primary. When we add a new replica to replica set, the single index is
created automatically but the compound index weren&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;The mothod that I used is very simple. It go over the source database,
read the index, and attempt to re-create them in the secondary. Here is
the procedure.&lt;/p&gt;

&lt;h2 id=&#34;remove-the-secondary-from-replicaset&#34;&gt;Remove the secondary from replicaset&lt;/h2&gt;

&lt;p&gt;This is necessary because we cannot write to a secondary.&lt;/p&gt;

&lt;h2 id=&#34;create-the-index&#34;&gt;Create the index&lt;/h2&gt;

&lt;h2 id=&#34;add-the-node-back-to-replica-set&#34;&gt;Add the node back to replica set&lt;/h2&gt;

&lt;p&gt;Finally now the indexes are in-sync with master and any new index will
be replicated to secondary as well&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use minikube for local kubernetes development</title>
      <link>https://yeo.space/blog/use-minikube-for-local-kubernetes-development/</link>
      <pubDate>Tue, 20 Dec 2016 09:26:18 -0800</pubDate>
      
      <guid>https://yeo.space/blog/use-minikube-for-local-kubernetes-development/</guid>
      <description>&lt;p&gt;Install kubernetes is quite complex and people usually ops to use the
automation tool that bootstrap whole cluster on a cloud provider.
Recently kubenetes introduce [minikube] allow us do the same but on
local computer. This tool helps us play around with kubernetes easily.&lt;/p&gt;

&lt;p&gt;To practice, let&amp;rsquo;s use minukube to develop a small application with
these features:&lt;/p&gt;

&lt;p&gt;-&lt;/p&gt;

&lt;p&gt;We will use these technology:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ArangoDB&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Building your own APT package repository</title>
      <link>https://yeo.space/blog/building-your-own-APT-package-repository/</link>
      <pubDate>Sun, 21 Aug 2016 18:15:36 -0700</pubDate>
      
      <guid>https://yeo.space/blog/building-your-own-APT-package-repository/</guid>
      <description>&lt;p&gt;description = &amp;ldquo;Let&amp;rsquo;s go over creating your own apt repository so that people can pull and install software from it&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>free ssl for private ip</title>
      <link>https://yeo.space/blog/free-ssl-for-private-ip/</link>
      <pubDate>Sat, 20 Aug 2016 20:19:26 -0700</pubDate>
      
      <guid>https://yeo.space/blog/free-ssl-for-private-ip/</guid>
      <description>

&lt;p&gt;Setting up Let&amp;rsquo;sencrypt is easier if server is on public network? How
can we do that when it&amp;rsquo;s private server but we still needs TLS for it,
like a MongoDB cluster, or an internal dashboard behind VPN.&lt;/p&gt;

&lt;p&gt;Well, DNS come to rescue. The idea is that now instead of using a web
server for Letsencrypt challenge, we will use DNS txt record. Example,
to verify &lt;code&gt;domain.com&lt;/code&gt;, a TXT record for &lt;code&gt;_acme_challenge.domain.com&lt;/code&gt;
with challenge response is created.&lt;/p&gt;

&lt;p&gt;To make thing even easier, &lt;a href=&#34;github.com/xenolf/lego&#34;&gt;lego&lt;/a&gt; is a
let&amp;rsquo;sencrypt client written in Go lang so we only need to download the
binary and execute it withou installing on Python stuff like official
client.&lt;/p&gt;

&lt;h2 id=&#34;1-install-lego&#34;&gt;1. Install lego&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;curl https://github.com/xenolf/lego/releases/download/v0.3.1/lego_linux_amd64.tar.xz
-o lego.tar.xz
tar xvfJ lego.tar.xz
mv lego /usr/local/bin/
chmod 0755 /usr/local/bin/lego
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-create-route53-policy&#34;&gt;2. Create Route53 policy&lt;/h2&gt;

&lt;p&gt;We can use AWS API Key and Secret but this means we need to maintain and
pass they key somehow. Using IAM role is way easier. Simply createa an
IAM role with this policy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
    &amp;quot;Statement&amp;quot;: [
        {
            &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
            &amp;quot;Action&amp;quot;: [
                &amp;quot;route53:GetChange&amp;quot;,
                &amp;quot;route53:ListHostedZonesByName&amp;quot;
            ],
            &amp;quot;Resource&amp;quot;: [
                &amp;quot;*&amp;quot;
            ]
        },
        {
            &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
            &amp;quot;Action&amp;quot;: [
                &amp;quot;route53:ChangeResourceRecordSets&amp;quot;
            ],
            &amp;quot;Resource&amp;quot;: [
                &amp;quot;arn:aws:route53:::hostedzone/&amp;lt;INSERT_YOUR_HOSTED_ZONE_ID_HERE&amp;gt;&amp;quot;
            ]
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-cert&#34;&gt;Create cert&lt;/h2&gt;

&lt;p&gt;On ec2 instance, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lego --email=&amp;quot;foo@bar.com&amp;quot; --domains=&amp;quot;example.com&amp;quot; --dns=&amp;quot;route53&amp;quot; run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create a private key and cert in &lt;code&gt;.lego&lt;/code&gt; directory in current working directory.&lt;/p&gt;

&lt;h2 id=&#34;renew&#34;&gt;Renew&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;lego --email=&amp;quot;foo@bar.com&amp;quot; --domains=&amp;quot;example.com&amp;quot; --dns=&amp;quot;route53&amp;quot; renew
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can put the renew command in &lt;code&gt;cron&lt;/code&gt; to renew every 2 months&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bulding infrastructure bot</title>
      <link>https://yeo.space/blog/infrastructure-bot/</link>
      <pubDate>Fri, 19 Aug 2016 18:29:11 -0700</pubDate>
      
      <guid>https://yeo.space/blog/infrastructure-bot/</guid>
      <description>

&lt;p&gt;Using bot as a tool to trigger command is very convenience. We don&amp;rsquo;t
have to get on the VPN, SSH into servers and run commands. By using a
bot like an UI, it&amp;rsquo;s quick to get something. If yon are on the road and
want o check some status, it&amp;rsquo;s faster to type something itno Slack. It
does, however, raise some concern about security. Hence we can limit to
some commands to only allow from some users. But that&amp;rsquo;s out of scope of
this post.&lt;/p&gt;

&lt;p&gt;In this, we are introducing &lt;a href=&#34;https://github.com/NotyIm/bot-slack&#34;&gt;Infra
Bot&lt;/a&gt;, a tool that let you define
command and run from Slack. It&amp;rsquo;s written in Elixir so you will need
Elixir. Simply follow
&lt;a href=&#34;http://elixir-lang.org/install.html#unix-and-unix-like&#34;&gt;this&lt;/a&gt; to
install it.&lt;/p&gt;

&lt;p&gt;After you are done, let&amp;rsquo;s deploy our bot.&lt;/p&gt;

&lt;h2 id=&#34;getting-slack-credential&#34;&gt;Getting slack credential&lt;/h2&gt;

&lt;p&gt;Create a slack app to get client and secret token. Make sure you enable
the bot and interactive button. The url of its is
[domain_where_you_deploy_bot]/button&lt;/p&gt;

&lt;h2 id=&#34;setting-environment-variables&#34;&gt;Setting environment variables&lt;/h2&gt;

&lt;p&gt;The bot needs those:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export SLACK_CLIENT_ID=id
export SLACK_CLIENT_SECRET=secret
export BOT_PREFIX=[trigger_word]
export MDBDB=mysqldb_name
export MDBHOST=db_host
export MDBUSER=root
export MDBPASSWORD=root
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;BOT_PREFIX&lt;/strong&gt; is a trigger word so when you type &lt;code&gt;bot do this for
me&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;define-command&#34;&gt;Define command&lt;/h2&gt;

&lt;p&gt;Create a file call &lt;code&gt;config/command.exs&lt;/code&gt; with this content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Mix.Config

config :infra_bot, :command_runner,
  [
    {&amp;quot;my_action&amp;quot;,
      %{
        trigger: ~r/^vinh (.*)/,
        regex:
~r/vinh\s*(?&amp;lt;resource&amp;gt;.*)(for|of|on)\s*(?&amp;lt;client&amp;gt;[^\s]+)/,
        command: %{
          sub_action: %{
            text: &amp;quot;sub action&amp;quot;,
            cmd: &amp;quot;script_to_be_run&amp;quot;,
            args: [&amp;quot;client&amp;quot;, &amp;quot;resource&amp;quot;],
          },
        }
      }
    },

  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can define a regex using capture name and pass them via &lt;strong&gt;args&lt;/strong&gt;
parameters. When you send a message with that pattern, the bot parse it
to get parameter, and invoke the script in command with passing
parameters.&lt;/p&gt;

&lt;p&gt;Example, I can have this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Mix.Config

config :infra_bot, :command_runner,
  [
    {&amp;quot;server_metric&amp;quot;,
      %{
        trigger: ~r/^bot (.*)/,
        regex:
~r/bot\s*(?&amp;lt;metric&amp;gt;.*)(for|of|on)\s*(?&amp;lt;server&amp;gt;[^\s]+)/,
        command: %{
          sub_action: %{
            text: &amp;quot;shutdown &amp;quot;,
            cmd: &amp;quot;&amp;quot;,
            args: [&amp;quot;client&amp;quot;, &amp;quot;resource&amp;quot;],
          },
        }
      }
    },

  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;run-the-app&#34;&gt;Run the app&lt;/h2&gt;

&lt;p&gt;After configuring and have setting ready, you can run it like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source ./env  # to get env var
MIX_ENV=production mix phoenix.server
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;connect-the-bot&#34;&gt;Connect the bot&lt;/h2&gt;

&lt;p&gt;Go to [your_domain]:[port]/auth/1, you will be redirec to slack to
install your own bot. Once that&amp;rsquo;s done, you can go to slack and should
see it online. Now, command it to do thing&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>